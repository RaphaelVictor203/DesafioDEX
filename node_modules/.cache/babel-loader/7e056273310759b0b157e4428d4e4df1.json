{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\DesafioDex\\\\proj_dex\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n\nvar DEFAULT_PIN = '_default';\nvar PIN_PREFIX = 'parsePin_';\nvar LocalDatastore = {\n  fromPinWithName: function fromPinWithName(name\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.fromPinWithName(name);\n  },\n  pinWithName: function pinWithName(name\n  /*: string*/\n  , value\n  /*: any*/\n  )\n  /*: Promise*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.pinWithName(name, value);\n  },\n  unPinWithName: function unPinWithName(name\n  /*: string*/\n  )\n  /*: Promise*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.unPinWithName(name);\n  },\n  _getAllContents: function _getAllContents()\n  /*: Promise*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.getAllContents();\n  },\n  _clear: function _clear()\n  /*: Promise*/\n  {\n    var controller = _CoreManager.default.getLocalDatastoreController();\n\n    return controller.clear();\n  },\n  // Pin the object and children recursively\n  // Saves the object and children key to Pin Name\n  _handlePinWithName: function () {\n    var _handlePinWithName2 = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(name\n    /*: string*/\n    , object\n    /*: ParseObject*/\n    ) {\n      var pinName, objects, objectKey, pinned, objectIds, toPin;\n      return _regeneratorRuntime.wrap(function (_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              pinName = this.getPinName(name);\n              objects = this._getChildren(object);\n              objects[this.getKeyForObject(object)] = object._toFullJSON();\n              _context.t0 = _regeneratorRuntime.keys(objects);\n\n            case 4:\n              if ((_context.t1 = _context.t0()).done) {\n                _context.next = 10;\n                break;\n              }\n\n              objectKey = _context.t1.value;\n              _context.next = 8;\n              return this.pinWithName(objectKey, objects[objectKey]);\n\n            case 8:\n              _context.next = 4;\n              break;\n\n            case 10:\n              _context.next = 12;\n              return this.fromPinWithName(pinName);\n\n            case 12:\n              _context.t2 = _context.sent;\n\n              if (_context.t2) {\n                _context.next = 15;\n                break;\n              }\n\n              _context.t2 = [];\n\n            case 15:\n              pinned = _context.t2;\n              objectIds = Object.keys(objects);\n              toPin = (0, _toConsumableArray2.default)(new Set([].concat((0, _toConsumableArray2.default)(pinned), (0, _toConsumableArray2.default)(objectIds))));\n              _context.next = 20;\n              return this.pinWithName(pinName, toPin);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function () {\n      return _handlePinWithName2.apply(this, arguments);\n    };\n  }(),\n  // Removes object and children keys from pin name\n  // Keeps the object and children pinned\n  _handleUnPinWithName: function () {\n    var _handleUnPinWithName2 = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(name\n    /*: string*/\n    , object\n    /*: ParseObject*/\n    ) {\n      var localDatastore, pinName, objects, objectIds, pinned, _i, objectKey, hasReference, key, pinnedObjects;\n\n      return _regeneratorRuntime.wrap(function (_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._getAllContents();\n\n            case 2:\n              localDatastore = _context2.sent;\n              pinName = this.getPinName(name);\n              objects = this._getChildren(object);\n              objectIds = Object.keys(objects);\n              objectIds.push(this.getKeyForObject(object));\n              pinned = localDatastore[pinName] || [];\n              pinned = pinned.filter(function (item) {\n                return !objectIds.includes(item);\n              });\n\n              if (!(pinned.length == 0)) {\n                _context2.next = 15;\n                break;\n              }\n\n              _context2.next = 12;\n              return this.unPinWithName(pinName);\n\n            case 12:\n              delete localDatastore[pinName];\n              _context2.next = 18;\n              break;\n\n            case 15:\n              _context2.next = 17;\n              return this.pinWithName(pinName, pinned);\n\n            case 17:\n              localDatastore[pinName] = pinned;\n\n            case 18:\n              _i = 0;\n\n            case 19:\n              if (!(_i < objectIds.length)) {\n                _context2.next = 38;\n                break;\n              }\n\n              objectKey = objectIds[_i];\n              hasReference = false;\n              _context2.t0 = _regeneratorRuntime.keys(localDatastore);\n\n            case 23:\n              if ((_context2.t1 = _context2.t0()).done) {\n                _context2.next = 32;\n                break;\n              }\n\n              key = _context2.t1.value;\n\n              if (!(key === DEFAULT_PIN || key.startsWith(PIN_PREFIX))) {\n                _context2.next = 30;\n                break;\n              }\n\n              pinnedObjects = localDatastore[key] || [];\n\n              if (!pinnedObjects.includes(objectKey)) {\n                _context2.next = 30;\n                break;\n              }\n\n              hasReference = true;\n              return _context2.abrupt(\"break\", 32);\n\n            case 30:\n              _context2.next = 23;\n              break;\n\n            case 32:\n              if (hasReference) {\n                _context2.next = 35;\n                break;\n              }\n\n              _context2.next = 35;\n              return this.unPinWithName(objectKey);\n\n            case 35:\n              _i++;\n              _context2.next = 19;\n              break;\n\n            case 38:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function () {\n      return _handleUnPinWithName2.apply(this, arguments);\n    };\n  }(),\n  // Retrieve all pointer fields from object recursively\n  _getChildren: function _getChildren(object\n  /*: ParseObject*/\n  ) {\n    var encountered = {};\n\n    var json = object._toFullJSON();\n\n    for (var key in json) {\n      if (json[key].__type && json[key].__type === 'Object') {\n        this._traverse(json[key], encountered);\n      }\n    }\n\n    return encountered;\n  },\n  _traverse: function _traverse(object\n  /*: any*/\n  , encountered\n  /*: any*/\n  ) {\n    if (!object.objectId) {\n      return;\n    } else {\n      var objectKey = this.getKeyForObject(object);\n\n      if (encountered[objectKey]) {\n        return;\n      }\n\n      encountered[objectKey] = object;\n    }\n\n    for (var key in object) {\n      var json = object[key];\n\n      if (!object[key]) {\n        json = object;\n      }\n\n      if (json.__type && json.__type === 'Object') {\n        this._traverse(json, encountered);\n      }\n    }\n  },\n  // Transform keys in pin name to objects\n  _serializeObjectsFromPinName: function () {\n    var _serializeObjectsFromPinName2 = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4(name\n    /*: string*/\n    ) {\n      var _this = this;\n\n      var localDatastore, allObjects, key, pinName, pinned, objects;\n      return _regeneratorRuntime.wrap(function (_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this._getAllContents();\n\n            case 2:\n              localDatastore = _context4.sent;\n              allObjects = [];\n\n              for (key in localDatastore) {\n                if (key !== DEFAULT_PIN && !key.startsWith(PIN_PREFIX)) {\n                  allObjects.push(localDatastore[key]);\n                }\n              }\n\n              if (name) {\n                _context4.next = 7;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", Promise.resolve(allObjects));\n\n            case 7:\n              _context4.next = 9;\n              return this.getPinName(name);\n\n            case 9:\n              pinName = _context4.sent;\n              _context4.next = 12;\n              return this.fromPinWithName(pinName);\n\n            case 12:\n              pinned = _context4.sent;\n\n              if (Array.isArray(pinned)) {\n                _context4.next = 15;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", Promise.resolve([]));\n\n            case 15:\n              objects = pinned.map(\n              /*#__PURE__*/\n              function () {\n                var _ref = (0, _asyncToGenerator2.default)(\n                /*#__PURE__*/\n                _regeneratorRuntime.mark(function _callee3(objectKey) {\n                  return _regeneratorRuntime.wrap(function (_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          _context3.next = 2;\n                          return _this.fromPinWithName(objectKey);\n\n                        case 2:\n                          return _context3.abrupt(\"return\", _context3.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3, this);\n                }));\n\n                return function () {\n                  return _ref.apply(this, arguments);\n                };\n              }());\n              return _context4.abrupt(\"return\", Promise.all(objects));\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    return function () {\n      return _serializeObjectsFromPinName2.apply(this, arguments);\n    };\n  }(),\n  // Replaces object pointers with pinned pointers\n  // The object pointers may contain old data\n  // Uses Breadth First Search Algorithm\n  _serializeObject: function () {\n    var _serializeObject2 = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee5(objectKey\n    /*: string*/\n    , localDatastore\n    /*: any*/\n    ) {\n      var LDS, root, queue, meta, uniqueId, nodeId, subTreeRoot, field, value, key, pointer;\n      return _regeneratorRuntime.wrap(function (_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              LDS = localDatastore;\n\n              if (LDS) {\n                _context5.next = 5;\n                break;\n              }\n\n              _context5.next = 4;\n              return this._getAllContents();\n\n            case 4:\n              LDS = _context5.sent;\n\n            case 5:\n              root = LDS[objectKey];\n\n              if (root) {\n                _context5.next = 8;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", null);\n\n            case 8:\n              queue = [];\n              meta = {};\n              uniqueId = 0;\n              meta[uniqueId] = root;\n              queue.push(uniqueId);\n\n              while (queue.length !== 0) {\n                nodeId = queue.shift();\n                subTreeRoot = meta[nodeId];\n\n                for (field in subTreeRoot) {\n                  value = subTreeRoot[field];\n\n                  if (value.__type && value.__type === 'Object') {\n                    key = this.getKeyForObject(value);\n                    pointer = LDS[key];\n\n                    if (pointer) {\n                      uniqueId++;\n                      meta[uniqueId] = pointer;\n                      subTreeRoot[field] = pointer;\n                      queue.push(uniqueId);\n                    }\n                  }\n                }\n              }\n\n              return _context5.abrupt(\"return\", root);\n\n            case 15:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, this);\n    }));\n\n    return function () {\n      return _serializeObject2.apply(this, arguments);\n    };\n  }(),\n  // Called when an object is save / fetched\n  // Update object pin value\n  _updateObjectIfPinned: function () {\n    var _updateObjectIfPinned2 = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee6(object\n    /*: ParseObject*/\n    ) {\n      var objectKey, pinned;\n      return _regeneratorRuntime.wrap(function (_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (this.isEnabled) {\n                _context6.next = 2;\n                break;\n              }\n\n              return _context6.abrupt(\"return\");\n\n            case 2:\n              objectKey = this.getKeyForObject(object);\n              _context6.next = 5;\n              return this.fromPinWithName(objectKey);\n\n            case 5:\n              pinned = _context6.sent;\n\n              if (!pinned) {\n                _context6.next = 9;\n                break;\n              }\n\n              _context6.next = 9;\n              return this.pinWithName(objectKey, object._toFullJSON());\n\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, this);\n    }));\n\n    return function () {\n      return _updateObjectIfPinned2.apply(this, arguments);\n    };\n  }(),\n  // Called when object is destroyed\n  // Unpin object and remove all references from pin names\n  // TODO: Destroy children?\n  _destroyObjectIfPinned: function () {\n    var _destroyObjectIfPinned2 = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee7(object\n    /*: ParseObject*/\n    ) {\n      var localDatastore, objectKey, pin, key, pinned;\n      return _regeneratorRuntime.wrap(function (_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (this.isEnabled) {\n                _context7.next = 2;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 2:\n              _context7.next = 4;\n              return this._getAllContents();\n\n            case 4:\n              localDatastore = _context7.sent;\n              objectKey = this.getKeyForObject(object);\n              pin = localDatastore[objectKey];\n\n              if (pin) {\n                _context7.next = 9;\n                break;\n              }\n\n              return _context7.abrupt(\"return\");\n\n            case 9:\n              _context7.next = 11;\n              return this.unPinWithName(objectKey);\n\n            case 11:\n              delete localDatastore[objectKey];\n              _context7.t0 = _regeneratorRuntime.keys(localDatastore);\n\n            case 13:\n              if ((_context7.t1 = _context7.t0()).done) {\n                _context7.next = 30;\n                break;\n              }\n\n              key = _context7.t1.value;\n\n              if (!(key === DEFAULT_PIN || key.startsWith(PIN_PREFIX))) {\n                _context7.next = 28;\n                break;\n              }\n\n              pinned = localDatastore[key] || [];\n\n              if (!pinned.includes(objectKey)) {\n                _context7.next = 28;\n                break;\n              }\n\n              pinned = pinned.filter(function (item) {\n                return item !== objectKey;\n              });\n\n              if (!(pinned.length == 0)) {\n                _context7.next = 25;\n                break;\n              }\n\n              _context7.next = 22;\n              return this.unPinWithName(key);\n\n            case 22:\n              delete localDatastore[key];\n              _context7.next = 28;\n              break;\n\n            case 25:\n              _context7.next = 27;\n              return this.pinWithName(key, pinned);\n\n            case 27:\n              localDatastore[key] = pinned;\n\n            case 28:\n              _context7.next = 13;\n              break;\n\n            case 30:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, this);\n    }));\n\n    return function () {\n      return _destroyObjectIfPinned2.apply(this, arguments);\n    };\n  }(),\n  // Update pin and references of the unsaved object\n  _updateLocalIdForObject: function () {\n    var _updateLocalIdForObject2 = (0, _asyncToGenerator2.default)(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee8(localId, object\n    /*: ParseObject*/\n    ) {\n      var localKey, objectKey, unsaved, localDatastore, key, pinned;\n      return _regeneratorRuntime.wrap(function (_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              if (this.isEnabled) {\n                _context8.next = 2;\n                break;\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 2:\n              localKey = \"\".concat(object.className, \"_\").concat(localId);\n              objectKey = this.getKeyForObject(object);\n              _context8.next = 6;\n              return this.fromPinWithName(localKey);\n\n            case 6:\n              unsaved = _context8.sent;\n\n              if (unsaved) {\n                _context8.next = 9;\n                break;\n              }\n\n              return _context8.abrupt(\"return\");\n\n            case 9:\n              _context8.next = 11;\n              return this.unPinWithName(localKey);\n\n            case 11:\n              _context8.next = 13;\n              return this.pinWithName(objectKey, unsaved);\n\n            case 13:\n              _context8.next = 15;\n              return this._getAllContents();\n\n            case 15:\n              localDatastore = _context8.sent;\n              _context8.t0 = _regeneratorRuntime.keys(localDatastore);\n\n            case 17:\n              if ((_context8.t1 = _context8.t0()).done) {\n                _context8.next = 29;\n                break;\n              }\n\n              key = _context8.t1.value;\n\n              if (!(key === DEFAULT_PIN || key.startsWith(PIN_PREFIX))) {\n                _context8.next = 27;\n                break;\n              }\n\n              pinned = localDatastore[key] || [];\n\n              if (!pinned.includes(localKey)) {\n                _context8.next = 27;\n                break;\n              }\n\n              pinned = pinned.filter(function (item) {\n                return item !== localKey;\n              });\n              pinned.push(objectKey);\n              _context8.next = 26;\n              return this.pinWithName(key, pinned);\n\n            case 26:\n              localDatastore[key] = pinned;\n\n            case 27:\n              _context8.next = 17;\n              break;\n\n            case 29:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, this);\n    }));\n\n    return function () {\n      return _updateLocalIdForObject2.apply(this, arguments);\n    };\n  }(),\n  getKeyForObject: function getKeyForObject(object\n  /*: any*/\n  ) {\n    var objectId = object.objectId || object._getId();\n\n    return \"\".concat(object.className, \"_\").concat(objectId);\n  },\n  getPinName: function getPinName(pinName\n  /*: ?string*/\n  ) {\n    if (!pinName || pinName === DEFAULT_PIN) {\n      return DEFAULT_PIN;\n    }\n\n    return PIN_PREFIX + pinName;\n  },\n  checkIfEnabled: function checkIfEnabled() {\n    if (!this.isEnabled) {\n      console.log('Parse.enableLocalDatastore() must be called first'); // eslint-disable-line no-console\n    }\n\n    return this.isEnabled;\n  }\n};\nLocalDatastore.DEFAULT_PIN = DEFAULT_PIN;\nLocalDatastore.PIN_PREFIX = PIN_PREFIX;\nLocalDatastore.isEnabled = false;\nmodule.exports = LocalDatastore;\n\n_CoreManager.default.setLocalDatastoreController(require('./LocalDatastoreController.browser'));\n\n_CoreManager.default.setLocalDatastore(LocalDatastore);","map":null,"metadata":{},"sourceType":"script"}